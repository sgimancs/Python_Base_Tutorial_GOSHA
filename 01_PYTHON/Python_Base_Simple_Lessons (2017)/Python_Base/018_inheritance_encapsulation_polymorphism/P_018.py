# coding=utf-8
# *******************************************************************************************
# 018 - Наследование, инкапсуляция, полиморфизм
# Gosha Dudar, 2017
# *******************************************************************************************
# Writing sgiman, 2017-2022
# Last Modification, 2025
# -------------------------------------------------------------------------------------------
# Наследование - заимствование свойств и методов от основного класса c целью расширения
# Инкапсуляция - защита данных класса (ограничение доступа к свойствам и методам) - удобная
# Полиморфизм -  использование одного и того же метода, но по разному в разных классах
#

# *************
#     Класс
# *************
class Person:
    name = "Ivan"                   # Параметры (свойства)
    # __name = "Ivan"               # "__' инкапсуляция для ограничения доступа наследникам (аналогичен privat)
    age = 10

    def set(self, name, age):       # Метод, self - содержит экземпляр класса (аналогичен this)
        self.name = name
        self.age = age


#    def __set(self, name, age):    # Инкапсуляция метода "__" (не публичный - аналогичен privat)
#        self.name = name
#        self.age = age

# П О Л И М О Р Ф И З М
class Student(Person):              # Наследование основного класса Person
    course = 1                      # Добавить доп. свойство


igor = Student()    # Н А С Л Е Д О В А Н И Е (создание нового объекта класса)
igor.set("Igor", 19)
igor.course = 2
print('NAME: ', igor.name)
print('COURSE: ', igor.course)

print("\n*** 1 ***")
vlad = Person()                         # Новый объект класса Person
vlad.set("Влад", 25)        # Новые характеристики объекта для класса
print(vlad.name + " " + str(vlad.age))

print("\n*** 2 ***")
ivan = Person()                         # Новый объект класса Person
ivan.set("Иван", 56)        # Новые характеристики объекта для класса
print(ivan.name + " " + str(ivan.age))

